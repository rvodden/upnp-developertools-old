#ifndef _RESOURCE_PROVIDER_HTTP_CONTAINER_H
#define _RESOURCE_PROVIDER_HTTP_CONTAINER_H

#include "ResourceProvider.h"

//	Provides HTTP-GET resources for all container objects in the CDS.
//	Also ties into the DeviceBuilder-generated HTTP web server modules
//	to provide the HTTP transfer capabilities.
class ResourceProvider_HttpContainer : public ResourceProvider
{
private:
	MediaDatabase*	m_Database;
	void*			m_WebServer;
	int				m_PortNumber;
	char			m_VirDirName[24];
	int				m_VirDirNameLen;

	//	Any time a URI (generated by this ResourceProvider) is requested, the request is routed to this
	//	static method. 
	static void Sink_HandleWebRequest(struct ILibWebServer_Session *session, struct packetheader *header, char *bodyBuffer, int *beginPointer, int endPointer, int done, void *user);

	//	Called whenever the asynchronous socket finished sending a block of data that was given to it.
	static void Sink_HandleSendOK(struct ILibWebServer_Session *session);

	//	Called whenever the transfer session ends.
	static void Sink_HandleDisconnect(struct ILibWebServer_Session *session);

	//	The static method calls this method.
	void Sink_HandleWebRequest (struct ILibWebServer_Session *session, struct packetheader *header, char *bodyBuffer, int *beginPointer, int endPointer, int done);

public:
	//	Constructor.
	//
	//	Requires a webserver token.
	//	(acquired from ContentDirectoryServer.GetWebServerToken())
	//
	//	Requires a pointer to the database for doing a lookup
	//	for handling an HTTP-GET requests.
	ResourceProvider_HttpContainer(MediaDatabase *database, void* webServerToken);
	virtual ~ResourceProvider_HttpContainer();
	//	Given content metadata (eg, dbEntry)
	//	and the IP addresses available for the system, the implementation
	//	of this method will return a linked list of CdsMediaResource objects
	//	to represent the 'res' elements of the content.
	//
	//	The purpose of sending the IP addresses is to allow this method's
	//	implementation to return multiple CdsMediaResource objects, so
	//	that their is one 'res' element for each IP address of the content.
	//
	//	This method only returns resources only when dbEntry->Class is
	//	equal to 
	//		MEDIA_DB_CL_C_STORAGE,
	//		MEDIA_DB_CL_C_PLAYLIST.
	//	All other forms of database entries will cause this method to return NULL.
	virtual struct CdsMediaResource* GetResources(const MediaItemData* dbEntry, const int *ipAddrList, const int ipAddrListLen);

	//	Returns the number of HTTP transfers associated with this ResourceProvider.
	virtual int GetNumTransfers();

	//	Returns a thread-safe array of TransferProgress objects.
	//
	//	The caller can specify the range of desired transfers. 
	//	This is useful for user-interfaces that want to request
	//	a subset of the transfers that can be displayed.
	//
	//	startIndex represents the zero-based index of the first transfer. 
	//	maxCount represents the maximum number of TransferProgress objects to return.
	//	numReturned represents the size of the TransferProgress array.
	virtual TransferProgress** GetTransferList(int startIndex, int maxCount, int *numReturned);
	virtual void DestroyTransferList(TransferProgress **tp);
};

#endif
